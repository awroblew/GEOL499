import numpy as np
import matplotlib.pyplot as plt 
import mpmath as mp

# A3-A14 used in calculations

# goal: demonstrate importance of T in controlling absolute levels or displacement and stress and their variation with distance from load center

# constants
q = 1.3e8 # uniform vertical load in dyne/cm^2
rho = 3.4 # density interior to the shell in g/cm^3
v = 0.25 # Poisson's ratio
E = 10**12 # Young's modulus in dyne/cm^2
T1, T2, T3 = 25, 30, 100 # shell thicknesses in km
d = 200 # radius of load in km
R = np.array(list(range(1, 701, 1))) # range of radial distances, 0-700km

# flexural rigidity (A1)
def D(E0, T0, v0):
    return (E0*T0**3)/(12*(1-v0))

# gravititational acceleration at given radius r
def g(R0, T0):
    return R0 - T0/2

# radius of relative stiffness (A2)
def l(D0, E0, T0, R0, rho0, g0):
    return (D0/((E0*T0/R0**2)+rho*g0))**(1/4)

# define functions to determine displacement, radial stress, and azimuthal stress inside the load
D1 = D(E, T1, v)
g1 = g(R, T1)
l1 = l(D1, E, T1, R, rho, g1)
x1 = R/l1
d1 = d/l1

d = []
test = d.append(mp.ker(n = 0, z = d1, derivative = 1))
print(test)

'''
# displacement w (A3 nad A8)
def w(x0, d0, q0, E0, T0, R0, g0, rho0):
    w_in = []
    w_out = []
    for i in range(x0):
        if np.any(x0 <= d0):
            w01 = (q0/(((E0*T0)/R0**2)+(rho0*g0)))*((d0*mp.ker(0, d0, derivative = 1)*mp.ber(0, x0, derivative = 0)) - (d0*mp.kei(0, d0, derivative = 1)*mp.bei(0, x0, derivative = 0)) + 1)
            w_in.append(w01)
            print(w_in)
        else:
            w02 = (q0/(((E0*T0)/R0**2)+(rho0*g0)))*((mp.ber(0, d0, derivative = 1)*mp.ker(0, x0, derivative = 0)) - (mp.bei(0, d0, derivative = 1)*mp.kei(0, x0, derivative = 0)))
            w_out.append(w02)
            
    w0 = np.concatenate((w_in, w_out))
    return w0

def M_phi(x0, v0, l0, d0, q0, E0, T0, R0, g0, rho0):
    Mp_in = []
    Mp_out = []
    for i in range(x0):
        if np.any(x0 <= d0):
            M_p01 = (-q0*d0*l**2)*((mp.ker(0, d0, derivative = 1))*(mp.bei(0,x0,derivative=0)+((1-v0)/x0)*mp.ber(0,x0,derivative=1)) + ((mp.kei(0, d0, derivative = 1))*(v0*mp.ber(0,x0,derivative=0)-((1-v0)/x0)*mp.bei(0,x0,derivative=1))))
            Mp_in.append(M_p01)
        else:
            M_p02 = (-q0*d0*l**2)*((mp.ber(0, d0, derivative = 1))*(mp.kei(0,x0,derivative=0)+((1-v0)/x0)*mp.ker(0,x0,derivative=1)) + ((mp.bei(0, d0, derivative = 1))*(v0*mp.ker(0,x0,derivative=0)-((1-v0)/x0)*mp.kei(0,x0,derivative=1))))
            Mp_out.append(M_p02)
            
    M_phi = np.concatenate((Mp_in, Mp_out))
    return M_phi

def M_theta(x0, v0, l0, d0, q0, E0, T0, R0, g0, rho0):
    Mt_in = []
    Mt_out = []
    for i in range(x0):
        if np.any(x0 <= d0):
            M_t01 = (-q0*d0*l**2)*((mp.ker(0, d0, derivative = 1))*(v0*mp.bei(0,x0,derivative=0)-((1-v0)/x0)*mp.ber(0,x0,derivative=1)) + ((mp.kei(0, d0, derivative = 1))*(v0*mp.ber(0,x0,derivative=0)+((1-v0)/x0)*mp.bei(0,x0,derivative=1))))
            Mt_in.append(M_t01)
        else:
            M_t02 = (-q0*d0*l**2)*((mp.ber(0, d0, derivative = 1))*(v0*mp.kei(0,x0,derivative=0)-((1-v0)/x0)*mp.ker(0,x0,derivative=1)) + ((mp.bei(0, d0, derivative = 1))*(v0*mp.ker(0,x0,derivative=0)+((1-v0)/x0)*mp.kei(0,x0,derivative=1))))
            Mt_out.append(M_t02)
            
    M_theta = np.concatenate((Mt_in, Mt_out))
    return M_theta

# solve for values
ww = w(x1, d1, q, E, T1, R, g1, rho)
MM_phi = M_phi(x1, v, l1, d1, q, E, T1, R, g1, rho)
MM_theta = M_phi(x1, v, l1, d1, q, E, T1, R, g1, rho)

'''
            
